# -*- coding:utf-8 -*-
__author__ = 'tuihou'
from parameterized import parameterized
from BasePage import Action
from public import locate
import unittest
import lib.Utils as U
import StartDriver
import sys
from lib import log
from tomorrow import threads
reload(sys)
sys.setdefaultencoding('utf-8')


ini = U.ConfigIni()
filepath = ini.get_ini('test_case', 'case_xlsx')


def read_datas():
    param_l = []
    datas = locate.readxls(filepath, 2)
    for data in datas:
        param_l.append(data)
    return param_l


class TestInit(unittest.TestCase):

    def __init__(self, methodName='runTest', device_l=None):
        super(TestInit, self).__init__(methodName)
        self.device_l = device_l
        TestInit.device_l = device_l
        
    def runTest(self):
        pass

    @staticmethod
    def parametrize(testcase_class, device_l=None):
        test_loader = unittest.TestLoader()
        test_names = test_loader.getTestCaseNames(testcase_class)
        suite = unittest.TestSuite()
        for name in test_names:
            suite.addTest(testcase_class(name, device_l=device_l))
        return suite


class RunTest(TestInit):

    @classmethod
    def setUpClass(cls):
        cls.driver = StartDriver.start(cls.device_l)
        cls.driver.implicitly_wait(30)
        cls.log = log.log()
        cls.log.info('test start')
        print "start"

    def buildStep(self, keyword, tag=None, loc=None, param=None, wish=None):
        key = "\"" + keyword.lower() + "\""
        params = [tag, loc, param, wish]
        param_text = ""
        for index in range(0, len(params)):
            if params[index] == None or params[index] == "":
                continue
            param_text += '"' + params[index] + '",'
        param_text = param_text[0:-1]
        if len(param_text) != 0:
            step = "A.action_sign({},{})".format(key, param_text)
        else:
            step = "A.action_sign({})".format(key)
        return step

    @parameterized.expand(read_datas)
    def test_action(self, *data):
        cases = locate.readxls(filepath, 0)
        for case in cases:
            if case[2] == "Y":
                print "【Run】" + case[1] + "："
                print " + -" * 8
                if (data[3] == "Y") & (data[0] == case[0]):
                    steps = locate.readxls(filepath, 1)
                    A = Action(self.driver)
                    k = 4
                    for step in steps:
                        if step[0] == data[0]:
                            desc = step[2]
                            key_word, sign, param, wish = step[3], step[4], step[5], step[7]
                            if sign != "":
                                ele = locate.locate(sign, filepath, 3)
                                tag, loc = ele[0], ele[1]
                                if key_word.lower() == 'input':
                                    param = data[4]
                                    step = self.buildStep(key_word, tag, loc, param)
                                    print desc + ':' + step
                                    k += 1
                                    eval(step)
                                elif key_word.lower() == 'gettext':
                                    step = self.buildStep(key_word, tag, loc)
                                    text = eval(step)
                                    if text == wish:
                                        A.action_sign('Screenshot', data[0], 'PASS')
                                    else:
                                        A.action_sign('Screenshot', data[0], 'FAIL')
                                else:
                                    step = self.buildStep(key_word, tag, loc, param)
                                    print desc + ':' + step
                                    eval(step)
                            else:
                                step = self.buildStep(key_word, param)
                                print desc + ':' + step
                                eval(step)
    
    def tearDown(self):
    i = 0
    while i < 10:
        i = i + 1
        try:
            Action(self.driver).click("xpath", "//*[@text='首页']")
            break
        except:
            ADB(self.device).send_key_event(4)
            try:
                Action(self.driver).click("xpath", "//*[@text='首页']")
                break
            except:
                ADB(self.device).send_key_event(4)
    
    @classmethod
    def tearDownClass(cls):
        print "End"
        cls.driver.quit()

    # def runTest(self):
    #     pass


if __name__ == '__main__':
    @threads(5)
    def start(device):
        suite = unittest.TestSuite()
        suite.addTest(TestInit.parametrize(RunTest, device_l=device))
        return unittest.TextTestRunner(verbosity=2).run(suite)
    device_lists = StartDriver.get_device_info()
    for device in device_lists:
       start(device)
